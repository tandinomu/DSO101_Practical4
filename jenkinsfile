pipeline {
    agent any
    
    tools {
        nodejs 'NodeJS-20.x'  // Must match Global Tool Configuration name
    }
    
    environment {
        // Define environment variables if needed
        NODE_ENV = 'test'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing npm dependencies...'
                sh 'npm install'
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running code linting...'
                sh 'npm run lint || echo "Linting step completed"'
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'npm test'
            }
        }
        
        stage('Build Application') {
            steps {
                echo 'Building application...'
                sh 'npm run build || echo "No build script found"'
            }
        }
        
        stage('Archive Artifacts') {
            steps {
                echo 'Archiving build artifacts...'
                archiveArtifacts artifacts: 'dist/**/*', allowEmptyArchive: true
                archiveArtifacts artifacts: 'build/**/*', allowEmptyArchive: true
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging environment...'
                // Add your deployment commands here
                sh 'echo "Deployment commands would go here"'
                // Examples:
                // sh 'scp -r dist/ user@staging-server:/var/www/app/'
                // sh 'aws s3 sync dist/ s3://my-staging-bucket/'
                // sh 'docker build -t my-app:staging .'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            cleanWs() // Clean workspace after build
        }
        success {
            echo 'Pipeline succeeded!'
            // Add success notifications here
        }
        failure {
            echo 'Pipeline failed!'
            // Add failure notifications here
        }
    }
}